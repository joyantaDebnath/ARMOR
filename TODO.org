#+TITLE: AERES Project Management

* AERES Project Status                                                 :work:
** Cryptography
   - Note taken on [2022-02-11 Fri 12:38] \\
     After a discussion, it was decided we will outsource cryptographic checks,
     invoking Aeres from a harness

   In order to perform differential testing, AERES or a harness for AERES needs
   to be able check that a digest was signed by the a given public key. There are
   no cryptographic libraries for Agda (that we know of), so we have considered
   the following options.

   1. [ ] Use Agda's Haskell FFI to connect Aeres to [[https://hackage.haskell.org/package/crypto-sodium][crypto-sodium]], a Haskell
      crypto library

   2. [ ] Use Agda's Haskell FFI to connect Aeres to Haskell, then use Haskell's
      FFI to connect to EverCrypt (or another formally verified crypto library)

   3. [X] Have Aeres return as output remaining cryptographic / PKCS checks to
      check, and use a harness to invoke EverCrypt / HaCL* / Vale (for just
      cryptographic checks) or [[https://github.com/Morpheus-Repo/Morpheus][Morpehus]] (for full PKCS checks)

** General
*** TODO Make AERES executable run semantic checks                    :@code:
    :PROPERTIES:
    :ASSIGNEE: Chris
    :END:
*** TODO Review semantic checks                                       :@code:
    :PROPERTIES:
    :ASSIGNEE: Chris
    :END:
*** TODO Review CCP7 from spec                                        :@code:
    :PROPERTIES:
    :Assignee: Joy
    :END:
*** TODO Update SCP18 to use total ordering for time                  :@code:
    :PROPERTIES:
    :ASSIGNEE: Chris
    :END:
*** TODO Implement chain building                                     :@code:

** StringPrep
*** TODO Define UTF8 spec                                             :@code:
*** TODO Analyze cert. census data for language (unicode)             :@code:
    :PROPERTIES:
    :ASSIGNEE: Joy
    :END:

    We are not planning on supporting /all/ languages supported by Unicode, so
    lets find a subset that covers most / all of our testing data
*** TODO String normalization code generation                         :@code:
    :PROPERTIES:
    :ASSIGNEE: Joy
    :END:

    Per discussion with Omar, having a function with "trie-like" cases might
    speed up runtime by sharing lookup, and compile time by reducing the number
    of cases

** Presentation
  

*** TODO Note =--sized-types= =--guardedness= inconsistency        :@typeset:
    :PROPERTIES:
    :ASSIGNEE: Chris
    :END:

   See the remark in the documentation [[https://agda.readthedocs.io/en/v2.6.1/language/safe-agda.html][here]], and the filed issue [[https://github.com/agda/agda/issues/1209][here]].

   - We only use sized types for the agda-stdlib trie implementation, and
     guardedness for the agda-stdlib IO implementation. We do not mixed guarded
     coinductive and sized inductive types, so the issue should not apply to us.

     That said, since sized types are broken on their own, the ideal solution is
     to roll our own trie implementation.
   

*** TODO Rename grammar properties                                    :@code:
    :PROPERTIES:
    :ASSIGNEE: Chris
    :END:

    The names of properties for the grammar elements should, where possible, be
    named following existing literature on languages.

    | Old name      | New name      |
    |---------------+---------------|
    | =NoConfusion= | =NoConflict=  |
    | =Unambiguous= | =Unique=      |
    | =NonEmpty=    |               |
    | =NonNesting=  | =Unambiguous= |
    |---------------+---------------|
    | =Dig=         | =UInt8=       |

*** TODO Move tests to their own directory                            :@code:

    This will also speed-up typechecking and compilation time

* End

#  LocalWords:  AERES

# Local Variables:
# eval: (flyspell-mode)
# eval: (smartparens-mode)
# End:
